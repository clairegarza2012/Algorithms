package edu.neumont.csc250;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import edu.neumont.nlp.DecodingDictionary;

public class ExhaustiveDecoder  {

	private DecodingDictionary dd = new DecodingDictionary();

	public List<String> decode(String message) {

		ArrayList<String> possibilities = new ArrayList<String>();
		Set<String> soFar = new HashSet<String>();

		decodeHelper(soFar, message, possibilities);

		//		for (String i : possibilities){
		//			System.out.println(i);
		//		}

		return possibilities;
	}

	private void decodeHelper(Set<String> soFar, String toGo, List<String> possibilities){

		if (toGo.isEmpty() ){
			//possibilities.addAll(soFar);
			return;
		}

		for (int index = 1; index < toGo.length(); index++){

			Set<String> words = dd.getWordsForCode(toGo.substring(0, index));

			if (words != null){
				System.out.print("words: ");

				for (String s : words){
					System.out.print(s + " ");
				}
			}
			System.out.println();

			String last = "";
			Iterator<String> it = soFar.iterator();

			while (it.hasNext()){
				last = it.next();
			}

			if (words != null){
				for (String s : words){

					if (!last.equals("")){
						int frequency = dd.frequencyOfFollowingWord(last, s);
						if (frequency < 50){
							continue;
						}
					}

					Set<String> newSoFar = soFar;
					soFar.add(s);

					String newToGo = toGo;
					newToGo = newToGo.substring(index);
					System.out.println(last + " " + s + " " + newToGo);
					decodeHelper(newSoFar, newToGo, possibilities);
				}
			}
		}
	}
}







