package edu.neumont.csc252;

public class HuffmanCompressor {

	public byte[] compress(HuffmanTree tree, byte[] b){

		byte[] compressed = new byte[b.length];

		for (int i = 0; i < b.length; i++){
			byte newByte = this.findNewByte(tree.getRoot(), b[i]);
		}

		return null;
	}

	private byte findNewByte(FrequencyNode root, byte b) {

		if (root.getValue().length <= 1){
			return 0;
		}
		
		// if root.left contains b
			// findNewByte(root.left, b)
		
		// if root.right contains b
			
		return 0;
	}

	public byte[] decompress(HuffmanTree tree, int uncompressedLength, byte[] b){

		return null;
	}

}
