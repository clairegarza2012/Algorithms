package edu.neumont.csc252;

import java.util.PriorityQueue;

import edu.neumont.io.Bits;

public class HuffmanTree {

	private FrequencyNode root = null;
	private PriorityQueue<FrequencyNode> frequencies = new PriorityQueue<FrequencyNode>();

	public HuffmanTree(byte[] b) {

		this.setFrequency(b);

		
	}

	public byte toByte(Bits bits){

		return (Byte) null;
	}

	public void fromByte(byte b, Bits bits){

	}

	private void setFrequency(byte[] b){

		int size = b.length;
		for (int i = 0; i < size; i++){

			double count = 1;
			for (int j = i + 1; j < size; j++) {

				if (b[i] == b[j]){
					count ++;
					size--;
					for (int k = j + 1; j < size; j++){
						b[k] = b[k+1];
					}
				}
			}

			double frequency = count / b.length;
			FrequencyNode node = new FrequencyNode( frequency, b[i]);
			frequencies.add(node);
			
		}
	}
	
	public PriorityQueue<FrequencyNode> getFrequencies(){
		return frequencies;
	}
	
	public void printFrequencies(){
		
		for (FrequencyNode fn: frequencies){
			System.out.println(fn.toString());
		}
	}
}
