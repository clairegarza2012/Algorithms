package edu.neumont.csc252;

import edu.neumont.io.Bits;

public class HuffmanCompressor {

	public byte[] compress(HuffmanTree tree, byte[] b){

		Bits bits = new Bits();
		
		for (int i = 0; i < b.length; i++){
			Bits temp = new Bits();
			tree.fromByte(b[i], temp);
			bits.addAll(temp);
		}

		String bitsString = "";
		int count = 0;
		
		System.out.println("Bits Size: " + bits.size());
		
		while (bits.size() % 8 != 0){
			bits.add(false);
		}
		
		byte[] compressed = new byte[bits.size() / 8];

		for (int i = 0; i < compressed.length; i++){

			if (bits.poll()){
				bitsString += 1;
			}else{
				bitsString += 0;
			}
			if (count < 8){
				Byte byte1 = new Byte(bitsString);
				System.out.println(bitsString);
				compressed[i] = byte1;
				count = 0;
				bitsString = "";
			}
			count++;
		}
		
		return compressed;
	}

	public byte[] decompress(HuffmanTree tree, int uncompressedLength, byte[] b){

		byte[] deCompressed = new byte[b.length];
		
		for (int i = 0; i < b.length; i++){

		}
		
		return deCompressed;
	}

}
