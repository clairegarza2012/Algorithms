package edu.neumont.csc252;

import java.util.Arrays;

public class Heap<T extends Comparable<T>> {

	private T[] heap;
	private int index = 1;

	@SuppressWarnings("unchecked")
	public Heap(){
		heap = (T[]) new Object[8];
	}

	@SuppressWarnings("unchecked")
	public Heap(int initialSize){
		heap = (T[]) new Object[initialSize];
	}

	public boolean insert(T t){

		for (T t1 : heap){
			if (t1.compareTo(t) == 0){
				return false;
			}
		}
		
		heap[index++] = t;

		if (index > heap.length){
			heap = Arrays.copyOf(heap, heap.length * 2);
		}

		if (index > 1){
			// check if t is bigger than the value at parent
		}
		
		return true;
	}

	public boolean getSmallest(){
		
		return getSmallestValue(1) != null;
	}

	private T getSmallestValue(int index) {

		if (index > heap.length){
			return null;
		}
		
		// compare each layer for smallest value of the two
		
		return null;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
