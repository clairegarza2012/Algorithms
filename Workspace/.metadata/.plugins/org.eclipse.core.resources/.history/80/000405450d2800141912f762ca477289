package edu.neumont.csc252;

public class AVLTree<T extends Comparable<T>> {

	private AVLNode<T> root = null;

	public AVLTree(){ }

	public boolean insert(T t){

		AVLNode<T> node = new AVLNode<>(t);
		if (root == null){
			root = node;
		}
		else {
			insertNode(root, node);
		}
		this.balanceTree(root, null);
		balanceHelper(root);

		return true;
	}

	private boolean insertNode(AVLNode<T> root, AVLNode<T> node){

		if (root.getLeft() == null && root.getRight() == null){
			if (root.compareTo(node) > 0){
				root.setLeft(node);
			}else if (root.compareTo(node) <= 0){
				root.setRight(node);
			}
			return true;
		}

		if (root.compareTo(node) > 0){
			if (root.getLeft() == null){
				root.setLeft(node);
				return true;
			}
			return insertNode(root.getLeft(), node);
		}else if (root.compareTo(node) <= 0){
			if (root.getRight() == null){
				root.setRight(node);
				return true;
			}
			return insertNode(root.getRight(), node);
		}

		return false;
	}

	private void balanceTree(AVLNode<T> root, AVLNode<T> parent){

		if (root == null){
			return;
		}
		if (root.getLeft() == null && root.getRight() == null){
			root.setHeight(1);
			root.setBalanceFactor(0);
			return;
		}

		int leftHeight = 0;
		if (root.getLeft() != null){
			leftHeight = this.sizeHelper(root.getLeft(), 0);
		}
		int rightHeight = 0;
		if (root.getRight() != null){
			rightHeight = this.sizeHelper(root.getRight(), 0);
		}

		int balanceFactor = leftHeight - rightHeight;
		System.out.println("Balance Factor: " + balanceFactor + "\n\tLeftHeight: " + leftHeight + "\n\tRightHeight: " + rightHeight);
		System.out.println(root + "\n");
		root.setBalanceFactor(balanceFactor);
		root.setHeight(Math.max(leftHeight, rightHeight) + 1);

		balanceTree(root.getLeft(), root);
		balanceTree(root.getRight(), root);
		
	}

	private void balanceHelper(AVLNode<T> root){

		if (root.getBalanceFactor() >= 2){
			System.out.println("I am getting called");
			if (root.getLeft().getBalanceFactor() == -1){

				AVLNode<T> leftSub = root.getLeft().getRight();
				AVLNode<T> rightSub = root.getLeft();
				AVLNode<T> prevRoot = root;

				if (leftSub.getLeft() != null)
					rightSub.setRight(leftSub.getLeft());
				if (leftSub.getRight() != null)
					prevRoot.setLeft(leftSub.getRight());

				leftSub.setLeft(rightSub);
				leftSub.setRight(prevRoot);
				root = leftSub;
			}
			else if (root.getLeft().getBalanceFactor() == 1){
				System.out.println("I am getting called!");
				AVLNode<T> leftSub = root.getLeft();
				AVLNode<T> rightSub = root.getLeft().getLeft();
				AVLNode<T> prevRoot = root;

				if (leftSub.getRight() != null)
					prevRoot.setLeft(leftSub.getRight());

				leftSub.setLeft(rightSub);
				leftSub.setRight(prevRoot);
				root = leftSub;
			}
		}
		else if (root.getBalanceFactor() <= -2){

			if (root.getRight().getBalanceFactor() == -1){

				AVLNode<T> leftSub = root.getRight().getLeft();
				AVLNode<T> rightSub = root.getRight();
				AVLNode<T> prevRoot = root;

				if (leftSub.getLeft() != null)
					prevRoot.setRight(leftSub.getLeft());
				if (leftSub.getRight() != null)
					rightSub.setLeft(leftSub.getRight());

				leftSub.setLeft(rightSub);
				leftSub.setRight(prevRoot);
				root = leftSub;
			}
			else if (root.getRight().getBalanceFactor() == 1){

				AVLNode<T> leftSub = root.getRight();
				AVLNode<T> rightSub = root.getRight().getRight();
				AVLNode<T> prevRoot = root;

				if (leftSub.getLeft() != null)
					prevRoot.setRight(leftSub.getLeft());

				leftSub.setLeft(rightSub);
				leftSub.setRight(prevRoot);
				root = leftSub;
			}
		}

	}

	public T delete(){

		return deleteHelper(root, null, this.getSmallest()).getValue();
	}

	private AVLNode<T> deleteHelper(AVLNode<T> root, AVLNode<T> parent, AVLNode<T> node) {

		if (root == null){
			return null;
		}
		else if (root.getLeft() == null && root.getRight() == null){
			if (parent == null){
				AVLNode<T> temp = root;
				root = null;
				this.root = null;
				return temp;
			}else{
				parent.setLeft(null);
				return root;
			}
		}
		else if (root.getLeft() == null){
			AVLNode<T> temp = root;
			if (parent == null){
				this.root = root.getRight();
				return temp;
			}
			parent.setLeft(temp.getRight());
			return temp;
		}

		return deleteHelper(root.getLeft(), root, node);
	}

	public AVLNode<T> getSmallest(){

		if (root == null){
			return null;
		}
		return getSmallestValue(root);
	}

	private AVLNode<T> getSmallestValue(AVLNode<T> root){

		if (root.getLeft() == null && root.getRight() == null){
			return root;
		}
		else if (root.getLeft() == null){
			return root;
		}
		return getSmallestValue(root.getLeft());
	}

	public void printTree(){
		printHelper(root);
	}

	private void printHelper(AVLNode<T> root){

		if (root == null){
			return;
		}
		if(root.getLeft() == null && root.getRight() == null){
			System.out.println(root.toString());
			return;
		}
		System.out.println(root.toString());
		printHelper(root.getLeft());
		printHelper(root.getRight());
	}

	public int size(){
		return sizeHelper(root, 0);
	}

	public int sizeHelper(AVLNode<T> root, int size){

		if (root == null){
			return 0;
		}
		if (root.getLeft() == null && root.getRight() == null){
			return 1;
		}

		return sizeHelper(root.getLeft(), size) + sizeHelper(root.getRight(), size) + 1;
	}

	//	public boolean search(AVLNode<T> node){
	//		
	//		return searchTree(root, node) != null;
	//	}
	//	
	//	private AVLNode<T> searchTree(AVLNode<T> root, AVLNode<T> node){
	//		
	//		if (root.compareTo(node) == 0){
	//			return root;
	//		}
	//		else if (root.getLeft() == null && root.getRight() == null){
	//			return null;
	//		}
	//		
	//		if (root.compareTo(node) < 0){
	//			return searchTree(root.getLeft(), node);
	//		}
	//		else if (root.compareTo(node) > 0){
	//			return searchTree(root.getRight(), node);
	//		}
	//		
	//		return null;
	//	}

}
