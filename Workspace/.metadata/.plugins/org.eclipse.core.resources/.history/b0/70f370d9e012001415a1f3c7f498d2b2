package edu.neumont.csc250;

import java.util.HashMap;
import edu.neumont.util.Client;
import edu.neumont.util.QueueableService;
import edu.neumont.util.Server;

public class Hospital implements QueueableService{

	private ArrayList<Client> waitingRoom = new ArrayList<Client>();
	private ArrayList<Server> nurses = new ArrayList<Server>();

	public Hospital(int numberOfNurses){

		for (int i = 0; i < numberOfNurses; i++){
			Server s = new Server();
			nurses.add(s);
		}

	}

	@Override
	public double getAverageClientWaitTime() {

		// get the average wait time for everyone in line
		// add up all the averages and divide by the clients waiting in line
		double sum = 0;

		for (Client c: waitingRoom){
			sum += this.getClientWaitTime(c);
		}

		return sum / waitingRoom.size();
	}

	private double getClientWaitNumber(Client client){

		double waitNumber = 0;
		double waitTime = 0;

		HashMap<Server, Double> lineTime = new HashMap<Server, Double>();
		HashMap<Server, Double> lineNumber = new HashMap<Server, Double>();

		for (Server s: nurses){
			if (s.getCurrentlyServing() == client){
				return 0;
			}
			lineTime.put(s, (double)s.getCurrentlyServing().getExpectedServiceTime());
			lineNumber.put(s, 1d);
		}

		for (Client c : waitingRoom){
			Server s = findShortestLine(lineTime);
			waitTime = lineTime.get(s);
			waitNumber = lineNumber.get(s);
			if (c == client){
				return waitNumber;
			}
			lineNumber.put(s, lineNumber.get(s) + 1);
			lineTime.remove(s);
			lineTime.put(s, (double)(waitTime + c.getExpectedServiceTime()));
		}

		return waitNumber;
	}

	@Override
	public double getClientWaitTime(Client client) {

		// check if client is being served
		// if not figure out how many people are in front of him by 
		// determine shortest line add next person
		// determine new shortest line, add next person
		double waitTime = 0;

		HashMap<Server, Double> lineTime = new HashMap<Server, Double>();

		for (Server s: nurses){
			if (s.getCurrentlyServing() == client){
				return 0;
			}
			lineTime.put(s, (double)s.getCurrentlyServing().getExpectedServiceTime());
		}

		for (Client c : waitingRoom){
			Server s = findShortestLine(lineTime);
			waitTime = lineTime.get(s);
			if (c == client){
				return waitTime;
			}
			lineTime.remove(s);
			lineTime.put(s, (double)(waitTime + c.getExpectedServiceTime()));
		}

		return waitTime;
	}

	private Server findShortestLine(HashMap<Server, Double> list){

		Server shortestLine = null;
		for (Server s: list.keySet()){
			if (shortestLine == null){
				shortestLine = new Server();
				shortestLine = s;
			}else if (list.get(shortestLine) > list.get(s)){
				shortestLine = s;
			}
		}

		return shortestLine;
	}

	@Override
	public boolean addClient(Client client) {

		if (client == null)
			return false;

		Server availableTeller = null;

		for (Server s: nurses){
			if (s.getCurrentlyServing() == null){
				availableTeller = new Server();
				availableTeller = s;
			}
		}

		if (availableTeller != null){
			availableTeller.setCurrentlyServing(client);
		}else{
			waitingRoom.add(client);
		}

		return true;
	}

	@Override
	public void advanceMinute() {

		for (Client c : waitingRoom){
			int remainingTime = c.servedMinute();

			if (remainingTime == 1){
				Server lowest = null;
				for (Server s : nurses){
					if (lowest == null){
						lowest = new Server();
						lowest = s;
					}else if (lowest.getCurrentlyServing().getExpectedServiceTime() < s.getCurrentlyServing().getExpectedServiceTime()){
						lowest = s;
					}
				}
				Client cl = lowest.getCurrentlyServing();
				waitingRoom.add(cl);
				
			}
			else if (remainingTime == 0){
				
			}
		}
	}

	public void printLines(){

		for (Server s: nurses){
			System.out.println("Server: " + s);
			System.out.println("\tClient: " + s.getCurrentlyServing() + " " + s.getCurrentlyServing().getExpectedServiceTime());
		}
		System.out.println("\nWaiting:");
		for (Client c: waitingRoom){
			System.out.println("\t" + c + " " + c.getExpectedServiceTime());
		}
	}

}
