package edu.neumont.csc252;

public class DotsAndBoxes {

	private Graph g;
	private int[] players;
	private int columnNum;

	public DotsAndBoxes(int rows, int columns){

		this.columnNum = columns + 1;
		players = new int[2];
		
		g = new Graph( (rows + 1) * (columns + 1) );

		for (int j = 0; j < g.vcount(); j++){

			if (j - (columns + 1) > 0 
					&& j + (columns + 1) < (columns + 1) * (rows + 1) - 1
					&& (j + 1)  % (columns + 1) != 0 
					&& j % (columns + 1) != 0){

				g.addEdge(j, j - (columns + 1) , 1);
				g.addEdge(j, j + (columns + 1), 1);
				g.addEdge(j, (j - 1) , 1);
				g.addEdge(j, (j + 1), 1);
			}

		} 

	}

	public int drawLine(int player, int x1, int y1, int x2, int y2){

		int points = 0;

		int v = x2 + (y2 * columnNum);
		int w = -1;

		if (x1 == x2){
			w = v - columnNum;
		}
		else if (y1 == y2){
			w = v + columnNum;
		}

		if ( w != -1){
			
			g.removeEdge(v, w);

			int vDeg = g.degree(v);
			int wDeg = g.degree(w);

			if (vDeg == 0){
				points++;
			}else if (wDeg == 0){
				points++;
			}
			players[player] = points;
			return points;
		}

		return -1;
	}

	public int score(int player){
		// returns the score for a player
		return players[player];
	}

	public boolean areMovesLeft(){ 
		// returns whether or not there are any lines to be drawn

		return false;
	}

	public int countDoubleCrosses(){
		// returns the number of double-crosses on the board
		return -1;
	}

	public int countCycles(){
		// returns the number of cycles on the board
		return -1;
	}

	public int countOpenChains(){
		// returns the number of open chains on the board
		return -1;
	}

}
