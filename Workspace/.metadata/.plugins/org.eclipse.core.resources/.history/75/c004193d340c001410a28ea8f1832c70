package edu.neumont.csc250;

import java.util.List;

public class Backtracking {

	public static void main(String[] args){
		
		Integer[] nums = {};
	}
	
	public static Integer[][]findPermutatons(Integer[] array){
		
		return null;
	}
	
	public static void findPermutationsHelper(List soFar, List toGo, List<Integer> successes){
		// success case
		// if toGO is empty, success!
			if (toGo.isEmpty() ){
				successes.add(soFar);
				return;
			}
		
		// failure case
		
			
		// for loop to try each element of toGO
			// "try" here means make a recursive call with a larger soFar and a smaller toGo
		
		String[] integersAsString = toGo.split(";");
		
		for (int index = 0; index < integersAsString.length; index++){
			String iAsString = integersAsString[index];
			
			if (toGo.substring(2) != null)
				toGo = toGo.substring(2);
			else
				toGo = "";
			
			findPermutationsHelper( soFar + iAsString + ";", toGo, successes);
		}
	}
}
