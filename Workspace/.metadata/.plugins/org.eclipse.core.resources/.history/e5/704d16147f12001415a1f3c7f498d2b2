package edu.neumont.csc250;

import java.util.ArrayDeque;
import edu.neumont.util.Client;
import edu.neumont.util.QueueableService;
import edu.neumont.util.Server;

public class Bank implements QueueableService{

	private ArrayDeque<Client> clientsWaitingForTeller = new ArrayDeque<Client>();
	private ArrayList<Server> tellers = new ArrayList<Server>();

	public Bank(int numberOfTellers){

		for (int i = 0; i < numberOfTellers; i++){
			Server s = new Server();
			tellers.add(s);
		}

	}

	@Override
	public double getAverageClientWaitTime() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public double getClientWaitTime(Client client) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean addClient(Client client) {

		if (client == null)
			return false;

		Server availableTeller = null;

		for (Server s: tellers){
			if (s.getCurrentlyServing() == null){
				availableTeller = new Server();
				availableTeller = s;
			}
		}

		if (availableTeller != null){
			availableTeller.setCurrentlyServing(client);
		}else{
			clientsWaitingForTeller.add(client);
		}

		return true;
	}

	@Override
	public void advanceMinute() {

		ArrayList<Server> temp = new ArrayList<Server>();
		temp.addAll(tellers);

		for (Server s: tellers){
			int remainingTime = s.getCurrentlyServing().servedMinute();

			if (remainingTime <= 0){
				temp.remove(s);
				Client c = clientsWaitingForTeller.pollFirst();
				s.setCurrentlyServing(c);
			}
		}

		tellers.clear();
		tellers.addAll(temp);
	}

	public void printLines(){

		for (Server s: tellers){
			System.out.println("Server: " + s);
			System.out.println("\tClient: " + s.getCurrentlyServing() + " " + s.getCurrentlyServing().getExpectedServiceTime());
		}
		System.out.println("\nWaiting:");
		for (Client c: clientsWaitingForTeller){
			System.out.println("\t" + c + " " + c.getExpectedServiceTime());
		}
	}

}
