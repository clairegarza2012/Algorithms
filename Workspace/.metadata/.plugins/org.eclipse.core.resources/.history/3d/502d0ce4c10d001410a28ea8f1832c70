package edu.neumont.csc250;

import java.util.ArrayList;
import java.util.List;

public class Backtracking {

	public static void main(String[] args){
		
		Integer[] nums = {};
	}
	
	public static Integer[][] findPermutatons(Integer[] array){
						
		return null;
	}
	
	public static void findPermutationsHelper(List soFar, List toGo, List successes){
		// success case
		// if toGO is empty, success!
			if (toGo.isEmpty() ){
				successes.addAll(soFar);
				return;
			}
		
		// failure case
		
		
		// for loop to try each element of toGO
			// "try" here means make a recursive call with a larger soFar and a smaller toGo
			
		for (int index = 0; index < toGo.size(); index++){
			
			Integer i  = (Integer)toGo.get(index);
			List newSoFar = new ArrayList(soFar);
			newSoFar.add(i);
			toGo.remove(index);
			
			findPermutationsHelper(newSoFar, toGo, successes);
		}
	}
}
