package edu.neumont.csc250;

import java.util.HashMap;

public class Hospital {

	private ArrayList<MyClient> waitingRoom = new ArrayList<MyClient>();
	private ArrayList<MyServer> nurses = new ArrayList<MyServer>();

	public Hospital(int numberOfNurses){

		for (int i = 0; i < numberOfNurses; i++){
			MyServer s = new MyServer();
			nurses.add(s);
		}

	}

	//
	public double getAverageClientWaitTime() {

		// get the average wait time for everyone in line
		// add up all the averages and divide by the clients waiting in line
		double sum = 0;

		for (MyClient c: waitingRoom){
			sum += this.getClientWaitTime(c);
		}

		return sum / waitingRoom.size();
	}

	private double getClientWaitNumber(MyClient client){

		double waitNumber = 0;
		double waitTime = 0;

		HashMap<MyServer, Double> lineTime = new HashMap<MyServer, Double>();
		HashMap<MyServer, Double> lineNumber = new HashMap<MyServer, Double>();

		for (MyServer s: nurses){
			if (s.getCurrentlyServing() == client){
				return 0;
			}
			lineTime.put(s, (double)s.getCurrentlyServing().getExpectedServiceTime());
			lineNumber.put(s, 1d);
		}

		for (MyClient c : waitingRoom){
			MyServer s = findShortestLine(lineTime);
			waitTime = lineTime.get(s);
			waitNumber = lineNumber.get(s);
			if (c == client){
				return waitNumber;
			}
			lineNumber.put(s, lineNumber.get(s) + 1);
			lineTime.remove(s);
			lineTime.put(s, (double)(waitTime + c.getExpectedServiceTime()));
		}

		return waitNumber;
	}

	//
	public double getClientWaitTime(MyClient client) {

		// sort arrayList by attrition time
		ArrayList<MyClient> temp = new ArrayList<MyClient>();
		temp.addAll(waitingRoom.sort());
		
		double waitTime = 0;

		HashMap<MyServer, Double> lineTime = new HashMap<MyServer, Double>();

		for (MyServer s: nurses){
			if (s.getCurrentlyServing() == client){
				return 0;
			}
			lineTime.put(s, (double)s.getCurrentlyServing().getExpectedServiceTime());
		}

		for (MyClient c : waitingRoom){
			MyServer s = findShortestLine(lineTime);
			waitTime = lineTime.get(s);
			if (c == client){
				return waitTime;
			}
			lineTime.remove(s);
			lineTime.put(s, (double)(waitTime + c.getExpectedServiceTime()));
		}

		return waitTime;
	}

	private MyServer findShortestLine(HashMap<MyServer, Double> list){

		MyServer shortestLine = null;
		for (MyServer s: list.keySet()){
			if (shortestLine == null){
				shortestLine = new MyServer();
				shortestLine = s;
			}else if (list.get(shortestLine) > list.get(s)){
				shortestLine = s;
			}
		}

		return shortestLine;
	}

	//
	public boolean addClient(MyClient client) {

		if (client == null)
			return false;

		MyServer availableTeller = null;

		for (MyServer s: nurses){
			if (s.getCurrentlyServing() == null){
				availableTeller = new MyServer();
				availableTeller = s;
			}
		}

		if (availableTeller != null){
			availableTeller.setCurrentlyServing(client);
		}else{
			waitingRoom.add(client);
		}

		return true;
	}

	//
	public void advanceMinute() {

		for (MyServer s: nurses){
			int remainingTime = s.getCurrentlyServing().servedMinute();

			if (remainingTime <= 0){
				MyClient c = findLowest(waitingRoom);
				s.setCurrentlyServing(c);
			}
		}
		
		for (MyClient c : waitingRoom){
			int remainingTime = c.servedMinute();

			if (remainingTime == 1){ // replace lowest with highest
				MyServer highest = null;
				for (MyServer s : nurses){
					if (highest == null){
						highest = new MyServer();
						highest = s;
					}else if (highest.getCurrentlyServing().getExpectedServiceTime() < s.getCurrentlyServing().getExpectedServiceTime()){
						highest = s;
					}
				}
				MyClient cl = highest.getCurrentlyServing();
				waitingRoom.add(cl);
				highest.setCurrentlyServing(c);
				waitingRoom.remove(c);
			}
			else if (remainingTime == 0){
				waitingRoom.remove(c);
			}
		}
	}

	private MyClient findLowest(ArrayList<MyClient> waitingRoom2) {

		MyClient lowest = null;
		
		for (MyClient c : waitingRoom2){
			if (lowest == null){
				lowest = new MyClient(c.getExpectedServiceTime(), c.getAttritionTime());
			}
			else if (lowest.getAttritionTime() > c.getAttritionTime()){
				lowest = c;
			}
		}
		
		return lowest;
	}

	public void printLines(){

		for (MyServer s: nurses){
			System.out.println("MyServer: " + s);
			System.out.println("\tClient: " + s.getCurrentlyServing() + " " + s.getCurrentlyServing().getExpectedServiceTime());
		}
		System.out.println("\nWaiting:");
		for (MyClient c: waitingRoom){
			System.out.println("\t" + c + " " + c.getExpectedServiceTime());
		}
	}

}
