package edu.neumont.csc252;

public class Graph {

	int[][] graph;
	
	public Graph(int v){
		// initializes a graph of v vertices with no edges
		graph = new int[v][v];
	}
	
	public int vcount(){
		// returns number of vertices (whether connected or not) in the graph
		return graph.length;
	}
	
	public int ecount(){
		// returns the number of edges in the graph
		int count = 0;
		
		for (int i = 0; i < graph.length; i++){
			for (int j = i; j < graph.length; j++){
				if (graph[i][j] == 1){
					count ++;
				}
			}
		}
		
		return count;
	}
	
	public int first(int v){
		// returns the first vertex (in natural order) connected to vertex v.  If there are none, then vcount() is returned
		for (int i = 0; i < graph.length; i++){
			if (graph[v][i] == 1){
				return graph[v][i];
			}
		}
		
		return ;
	}
	
	public int next(int v, int w){
		// returns the vertex (in natural order) connected to vertex v after vertex w.  If there are no more edges after w, vcount() is returned
		return -1;
	}
	
	public void addEdge(int v, int w, int wt){
		// adds an edge between vertex v and vertex w.
	}

	public void removeEdge(int v, int w){
		// removes edge between vertex v and vertex w.
	}
	
	public boolean isEdge(int v, int w){
		// returns whether there is a connection between vertex v and vertex w
		return false;
	}
	
	public int degree(int v){
		// returns how many edges depart from vertex v
		return -1;
	}
	
	public int getMark(int v){
		// returns any graph coloring for this vertex
		return -1;
	}
	
	public void setMark(int v, int m){
		// colors vertex v color m
	}

}
