package edu.neumont.csc250;

import java.util.HashMap;
import edu.neumont.util.Client;
import edu.neumont.util.QueueableService;
import edu.neumont.util.Server;

public class GroceryStore implements QueueableService{

	private HashMap<Server, ArrayList<Client>> lines = new HashMap<Server, ArrayList<Client>>();
	
	public GroceryStore(int numberOfCashiers){
		for (int i = 0; i < numberOfCashiers; i++){
			Server s = new Server();
			lines.put(s, new ArrayList<Client>());
		}
	}
	
	@Override
	public double getAverageClientWaitTime() {

		return 0;
	}

	@Override
	public double getClientWaitTime(Client client) {

		return 0;
	}

	@Override
	public boolean addClient(Client client) {

		if (client == null)
			return false;
		
		Server minServerLine = null;
		for (Server s: lines.keySet()){
			
			if (minServerLine == null){
				minServerLine = new Server();
				minServerLine = s;
			}
			else{
				int minTime = 0;
				ArrayList<Client> minLineClients = lines.get(minServerLine);
				for (int i = 0; i < minLineClients.size(); i++){
					minTime += minLineClients.get(i).getExpectedServiceTime();
				}
				int sTime = 0;
				ArrayList<Client> sLineClients = lines.get(s);
				for (int i = 0; i < sLineClients.size(); i++){
					sTime += sLineClients.get(i).getExpectedServiceTime();
				}
				if (sTime < minTime)
					minServerLine = s;
			}
		}
		
		ArrayList<Client> minLineClients = lines.get(minServerLine);
		minLineClients.add(client);
		lines.remove(minServerLine);

		if (minLineClients.size() == 1){
			minServerLine.setCurrentlyServing(minLineClients.get(0));
		}
		
		lines.put(minServerLine, minLineClients);
		
		return true;
	}

	@Override
	public void advanceMinute() {

		for (Server s : lines.keySet()){
			int remainingTime = s.getCurrentlyServing().servedMinute();
			if (remainingTime <= 0){
				ArrayList<Client> sClients = lines.get(s);
				Client remove = sClients.get(0);
				sClients.remove(remove);
				s.setCurrentlyServing(sClients.get(0));
				lines.remove(s);
				lines.put(s, sClients);
			}
		}
	}

}
