package edu.neumont.csc250;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import edu.neumont.nlp.DecodingDictionary;

public class ExhaustiveDecoder  {

	private DecodingDictionary dd = new DecodingDictionary();

	public List<String> decode(String message) {

		ArrayList<String> possibilities = new ArrayList<String>();
		Set<String> soFar = new HashSet<String>();

		decodeHelper(soFar, message, possibilities);

		return possibilities;
	}

	private void decodeHelper(Set<String> soFar, String toGo, List<String> possibilities){

		if (toGo.isEmpty() ){
			possibilities.addAll(soFar);
			return;
		}

		for (int index = 0; index < toGo.length(); index++){

			//for (int i = index + 1; i < toGo.length() - index; i ++){

				Set<String> words = dd.getWordsForCode(toGo.substring(0, index));

				String last = "";
				Iterator<String> it = soFar.iterator();

				while (it.hasNext()){
					last = it.next();
				}

				if (words != null){
					for (String s : words){

						if (last != ""){
							int frequency = dd.frequencyOfFollowingWord(last, s);
							if (frequency < 1){
								
							}
						}

						Set<String> newSoFar = soFar;
						soFar.add(s);

						String newToGo = toGo;
						newToGo = newToGo.substring(index + i);
						System.out.println(last + " " + s + " " + " " + newToGo);
						decodeHelper(newSoFar, newToGo, possibilities);
					}
				}
			//}
		}
	}
}
