package edu.neumont.csc252;

public class DotsAndBoxes {

	private Graph g;
	private int[] players;

	public DotsAndBoxes(int rows, int columns){

		g = new Graph( (rows + 1) * (columns + 1) );

		for (int j = 1; j < g.vcount(); j++){

			if (j - (columns + 1) > 0 && j + (columns + 1) < (columns + 1) * (rows + 1) - 1
				&& j - 1 % (columns + 1) != 0 && j + 1  % (columns + 1) != columns ){
				
				System.out.println("I run: " + j);
				
				g.addEdge(j, j - (columns + 1) , 1);
				g.addEdge(j, j + (columns + 1), 1);
				g.addEdge(j, j - 1 % (columns + 1), 1);
				g.addEdge(j, j + 1  % (columns + 1), 1);
			}

		} 

		g.toString();
	}

	public int drawLine(int player, int x1, int y1, int x2, int y2){
		// draws a line from (x1, y1) to (x2, y2) (0,0) is in the upper-left corner, 
		// returning how many points were earned, if any
		int points = 0;



		return -1;
	}

	public int score(int player){
		// returns the score for a player
		return players[player];
	}

	public boolean areMovesLeft(){ 
		// returns whether or not there are any lines to be drawn

		return false;
	}

	public int countDoubleCrosses(){
		// returns the number of double-crosses on the board
		return -1;
	}

	public int countCycles(){
		// returns the number of cycles on the board
		return -1;
	}

	public int countOpenChains(){
		// returns the number of open chains on the board
		return -1;
	}

}
