package edu.neumont.csc252.test;

import org.junit.Test;
import edu.neumont.csc252.FrequencyNode;
import edu.neumont.csc252.HuffmanCompressor;
import edu.neumont.csc252.HuffmanTree;
import edu.neumont.io.Bits;

public class HuffmanTreeTest {

	@Test
	public void test() {

		String string = "Hello World!";

		HuffmanTree tree = new HuffmanTree(string.getBytes());

		FrequencyNode root = tree.getRoot();
				
		HuffmanCompressor compressor = new HuffmanCompressor();
		byte[] bytes = compressor.compress(tree, string.getBytes());
		
		for (byte b : bytes){
			System.out.println(b);
		}
		
		//printLeafs(tree, root);
		
//		PriorityQueue<FrequencyNode> frequencies = tree.getFrequencies();
//		
//		while(frequencies.peek() != null){
//			System.out.println(frequencies.poll());
//		}
	}
	
	private void printLeafs(HuffmanTree tree, FrequencyNode root){
		
		if (root.getValue().length <= 1){
			System.out.println(root.toString());
			Bits b = new Bits();
			tree.fromByte(root.getValue()[0], b);
			System.out.println(b);
			return;
		}
		
		printLeafs(tree, root.getLeft());
		printLeafs(tree, root.getRight());
	}

}
