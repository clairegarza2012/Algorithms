package edu.neumont.csc250;

import java.util.ArrayList;
import java.util.List;

public class MergeSorter<T extends Comparable<T>> implements Sorter<T>{

	@Override
	public void sort(List<T> unsorted) {
	
		List<T> temp = sortHelper(unsorted);
		unsorted.clear();
		unsorted.addAll(temp);
	}

	public List<T> sortHelper(List<T> original){
		
		if (original.size() <= 1 )
			return original;

		int middleIndex = original.size() / 2;

		List<T> left = new ArrayList<T>();
		List<T> right = new ArrayList<T>();

		for (int i = 0; i < original.size(); i++){
			
			if (i < middleIndex){
				left.add(original.get(i));
			}
			else if (i >= middleIndex){
				right.add(original.get(i));
			}

		}
		
		left = sortHelper(left);
		right = sortHelper(right);
		
		return merge(left, right);
	}

	private List<T> merge(List<T> left, List<T> right) {
		
		List<T> result = new ArrayList<T>();
		
		int leftIndex = 0;
		int rightIndex = 0;
		// leftIndex < left.size() ...
		while (left.size() > 0 || right.size() > 0){
			if (left.size() > 0 && right.size() > 0){
				if (left.get(0).compareTo(right.get(0)) <= 0){
					result.add(left.get(0));
					left.remove(0);
				}
				else{
					result.add(right.get(0));
					right.remove(0);
				}
			}
			else if (left.size() > 0) {
				result.add(left.get(0));
				left.remove(0);
			}
			else if (right.size() > 0){
				result.add(right.get(0));
				right.remove(0);
			}
		}
		
		return result;
	}

	
	
	
	
	
	
	
	
	
}
