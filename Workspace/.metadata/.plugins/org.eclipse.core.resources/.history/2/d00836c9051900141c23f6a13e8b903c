package edu.neumont.csc250;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class QuickSorter<T extends Comparable<T>> implements Sorter<T>{

	int stopplz = 0;
	
	@Override
	public void sort(List<T> unsorted) {

		stopplz = 0;
		sortHelper(unsorted, 0, unsorted.size());
	}

	private void sortHelper(List<T> original, int startIndex, int endIndex){

		if (startIndex + 1 >= endIndex )
			return;

		
		stopplz++;
		
		if( stopplz > 5 )
		{
			//throw new NullPointerException( "Stop taht" );
		}
		T pivot = original.get(startIndex);

		System.out.println( "Pivot: " + ((Object)pivot).toString() + "\n" + Arrays.toString( original.toArray() ) );
		List<T> left = new ArrayList<T>();
		List<T> right = new ArrayList<T>();

		for (int i = startIndex + 1; i < endIndex; i++){
			
			if (pivot.compareTo(original.get(i)) > 0){
				left.add(original.get(i));
			}
			else if (pivot.compareTo(original.get(i)) <= 0){
				right.add(original.get(i));
			}
		}
		
		int count = 0;
		for (int i = 0; i < left.size(); i++){
			original.set(i + startIndex, left.get(i));
			count ++;
		}
		
		original.set(startIndex + count++, pivot);
		
		for (int i = count; i < endIndex - startIndex; i++){
			original.set(i + startIndex, right.get(i - count));
		}
		
		sortHelper(original, startIndex, count - 1);
		sortHelper(original, count, endIndex);
		
	}
	
	
	
	
	
	
	
	
	
	
	

}
