package edu.neumont.csc250;

import java.util.ArrayDeque;
import edu.neumont.util.Client;
import edu.neumont.util.QueueableService;
import edu.neumont.util.Server;

public class Bank implements QueueableService{

	private ArrayDeque<Client> clientsWaitingForTeller = new ArrayDeque<Client>();
	private ArrayList<Server> tellers = new ArrayList<Server>();

	public Bank(int numberOfTellers){

		for (int i = 0; i < numberOfTellers; i++){
			Server s = new Server();
			tellers.add(s);
		}

	}

	@Override
	public double getAverageClientWaitTime() {
		
		double sum = 0;
		
		for (Server s : tellers){
			sum += s.getCurrentlyServing().getExpectedServiceTime();
		}
		
		for (Client c: clientsWaitingForTeller){
			sum += this.getClientWaitTime(c);
		}
		
		return sum / (tellers.size() + clientsWaitingForTeller.size());
	}

	@Override
	public double getClientWaitTime(Client client) {
		
		double waitTime = 0;
		
		double lowTime = -1;
		
		for (Server s: tellers){
			if (s.getCurrentlyServing() == client){
				waitTime = client.getExpectedServiceTime();
				return waitTime;
			}
			else {
				int clientTime = s.getCurrentlyServing().getExpectedServiceTime();
				if (lowTime == -1){
					lowTime = clientTime;
				}else if (clientTime < lowTime){
					lowTime = clientTime;
				}
			}
		}
		
		waitTime = lowTime;
		
		for (Client c : clientsWaitingForTeller){
			waitTime += c.getExpectedServiceTime();
			if (c == client){
				return waitTime;
			}
		}
				
		return waitTime;
	}

	@Override
	public boolean addClient(Client client) {

		if (client == null)
			return false;

		Server availableTeller = null;

		for (Server s: tellers){
			if (s.getCurrentlyServing() == null){
				availableTeller = new Server();
				availableTeller = s;
			}
		}

		if (availableTeller != null){
			availableTeller.setCurrentlyServing(client);
		}else{
			clientsWaitingForTeller.add(client);
		}

		return true;
	}

	@Override
	public void advanceMinute() {
		
		for (Server s: tellers){
			int remainingTime = s.getCurrentlyServing().servedMinute();

			if (remainingTime <= 0){
				Client c = clientsWaitingForTeller.pollFirst();
				s.setCurrentlyServing(c);
			}
		}

	}

	public void printLines(){

		for (Server s: tellers){
			System.out.println("Server: " + s);
			System.out.println("\tClient: " + s.getCurrentlyServing() + " " + s.getCurrentlyServing().getExpectedServiceTime());
		}
		System.out.println("\nWaiting:");
		for (Client c: clientsWaitingForTeller){
			System.out.println("\t" + c + " " + c.getExpectedServiceTime());
		}
	}

}
