package edu.neumont.csc250;

import java.awt.Color;
import java.io.IOException;
import edu.neumont.ui.Picture;

public class Steganog {

	/**
	 * Takes a clean image and changes the prime-indexed pixels to secretly
	 * carry the message
	 **/
	public Picture embedIntoImage(Picture cleanImage, String message) 
			throws IOException {

		Picture dirtyImage = cleanImage;

		int totalPixles = dirtyImage.height() * dirtyImage.width();
		
		PrimeIterator it = new PrimeIterator(totalPixles);
		
		int messageIndex = 0;
		int y = 0;
		
		while(it.hasNext() && messageIndex < message.length()){
			int x = it.next();
			
			int currentCharacter = (int) message.charAt(messageIndex);
			messageIndex++;
			String characterBinaryString = Integer.toBinaryString(currentCharacter);
			for (int i = characterBinaryString.length(); i < 8; i++){
				characterBinaryString = "0" + characterBinaryString;
			}
			System.out.println("Character: " + characterBinaryString + " " + Integer.parseInt(characterBinaryString, 2) + " " + (char)(Integer.parseInt(characterBinaryString, 2)) + " " + Integer.toBinaryString(Integer.parseInt(characterBinaryString, 2)));
			
			Color oldColor = dirtyImage.get(x, y);
			
			int aa = oldColor.getAlpha();
			String alpha = Integer.toBinaryString(aa);
			String alphaFront = alpha.substring(0, 6);
			String a = characterBinaryString.substring(0, 2);
			alphaFront += a;
			
			int rr = oldColor.getRed();
			String red = Integer.toBinaryString(rr);
			for (int i = red.length(); i < 8; i++){
				red = "0" + red;
			}
			String redFront = red.substring(0, 6);
			String r = characterBinaryString.substring(2, 4);
			redFront += r;
			
			int gg = oldColor.getGreen();
			String green = Integer.toBinaryString(gg);
			for (int i = green.length(); i < 8; i++){
				green = "0" + green;
			}
			String greenFront = green.substring(0, 6);
			String g = characterBinaryString.substring(4, 6);
			greenFront += g;
			
			int bb = oldColor.getBlue();
			String blue = Integer.toBinaryString(bb);
			for (int i = blue.length(); i < 8; i++){
				blue = "0" + blue;
			}
			String blueFront = blue.substring(0, 6);
			String b = characterBinaryString.substring(6);
			blueFront += b;
			
			int alphaInt = Integer.parseInt(alphaFront, 2);
			int redInt = Integer.parseInt(redFront, 2);
			int greenInt = Integer.parseInt(greenFront, 2);
			int blueInt = Integer.parseInt(blueFront, 2);
			
			Color color = new Color(redInt, greenInt, blueInt, alphaInt); // all integers
			dirtyImage.set(x, y, color);
			
		}

		return dirtyImage;
	}

	/**
	 * Retreives the embedded secret from the secret-carrying image
	 */
	public String retreiveFromImage(Picture imageWithSecretMessage)
			throws IOException {

		String message = "";

		int totalPixles = imageWithSecretMessage.height() * imageWithSecretMessage.width();
		
		PrimeIterator it = new PrimeIterator(totalPixles);
		
		int y = 0;
		int x = 0;
		
		while(it.hasNext() && x < 127){
			x = it.next();
			
			Color color = imageWithSecretMessage.get(x, y);
			
			int alpha = 253;
			String alphaBits = Integer.toBinaryString(alpha);
			for (int i = alphaBits.length(); i < 8; i++){
				alphaBits = "0" + alphaBits;
			}
			String alphaChar = alphaBits.substring(6);
			
			int red = color.getRed();
			String redBits = Integer.toBinaryString(red);
			for (int i = redBits.length(); i < 8; i++){
				redBits = "0" + redBits;
			}
			String redChar = redBits.substring(6);
			
			int green = color.getRed();
			String greenBits = Integer.toBinaryString(green);
			for (int i = greenBits.length(); i < 8; i++){
				greenBits = "0" + greenBits;
			}
			String greenChar = greenBits.substring(6);
			
			int blue = color.getRed();
			String blueBits = Integer.toBinaryString(blue);
			for (int i = blueBits.length(); i < 8; i++){
				blueBits = "0" + blueBits;
			}
			String blueChar = blueBits.substring(6);
			
			String character = redChar + "" + greenChar + "" + blueChar + "alphaChar";
			System.out.println(message.length() + " " + alphaChar + redChar + greenChar + blueChar);
			
			int letter = Integer.parseInt(character, 2);
			message += (char)letter;
		}
		
		return message;
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
