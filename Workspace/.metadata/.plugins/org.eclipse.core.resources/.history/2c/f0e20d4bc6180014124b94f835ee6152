package edu.neumont.csc250;

import java.util.ArrayList;
import java.util.List;

public class QuickSorter<T extends Comparable<T>> implements Sorter<T>{

	@Override
	public void sort(List<T> unsorted) {

		sortHelper(unsorted, unsorted);
	}

	private void sortHelper(List<T> original, List<T> partial){

		if (partial.size() <= 1)
			return;

		int pivotIndex = partial.size() / 2;
		T pivot = partial.get(pivotIndex);

		T temp = partial.get(pivotIndex);
		partial.set(pivotIndex, partial.get(partial.size() - 1));
		partial.set(partial.size() - 1, temp);
		
		int rightCount = 0;
		for(int i = 0; i < partial.size() - 1; i++){
			for (int j = partial.size() - 1; j > 0 ; i--){
				if (partial.get(i).compareTo(pivot) < 0 && partial.get(i).compareTo(pivot) > 0){
					T temp2 = partial.get(i);
					partial.set(i, partial.get(j));
					partial.set(j, temp2);
				}else if (partial.get(i).compareTo(pivot) == 0){
					
				}else if (i >= j){
					
				}
			}
		}
		//sortHelper(original, left);
		//sortHelper(original, right);


	}

}
