package edu.neumont.csc252.test;

import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.PriorityQueue;

import javax.imageio.ImageIO;
import org.junit.Test;
import edu.neumont.csc252.FrequencyNode;
import edu.neumont.csc252.HuffmanCompressor;
import edu.neumont.csc252.HuffmanTree;
import edu.neumont.io.Bits;

public class HuffmanTreeTest {

	@Test
	public void test() {

		// Reads the char's from a file and stores into byte[]
		/* <----------------------------------------------------------------------------> */
		File file = new File("compressed.huff");
		
		BufferedReader reader = null;
		try {
			reader = new BufferedReader(new FileReader(file));
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}

		ArrayList<Byte> list = new ArrayList<>();

		int size = 0;
		try {
			while (reader.ready()){
				list.add((byte)reader.read());
				size++;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		byte[] compressedBytes = new byte[size];
		
		for (int i = 0; i < size; i++){
			compressedBytes[i] = list.get(i);
		}

		/* <----------------------------------------------------------------------------> */
		
		// Decompresses the bytes from above
		/* <----------------------------------------------------------------------------> */
		HuffmanTree tree = new HuffmanTree();

		HuffmanCompressor compressor = new HuffmanCompressor();

		byte[] bytes2 = compressor.decompress(tree, 54679, compressedBytes);

		/* <-----------------------------------------------------------------------------> */
		
		System.out.println("Original Length: " + 54679 + " Compressed Length:" + compressedBytes.length);
		
		// Attempts to convert the decompressed bytes to an Image
		/* <-----------------------------------------------------------------------------> */
		try {
			//InputStream in = new ByteArrayInputStream(bytes2);
			//BufferedImage bImageFromConvert = ImageIO.read(in);

			Files.write(Paths.get("C:/newImage.jpg"), bytes2);
			//ImageIO.write(bImageFromConvert, "jpg", new File("c:/newImage.jpg"));
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		/* <----------------------------------------------------------------------------> */

	}
}
