package edu.neumont.csc252.test;

import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.PriorityQueue;

import javax.imageio.ImageIO;
import org.junit.Test;
import edu.neumont.csc252.FrequencyNode;
import edu.neumont.csc252.HuffmanCompressor;
import edu.neumont.csc252.HuffmanTree;
import edu.neumont.io.Bits;

public class HuffmanTreeTest {

	@Test
	public void test() {

		File file = new File("compressed.huff");
		//		BufferedImage bufferedImage = null;
		//		try {
		//			bufferedImage = ImageIO.read(imgPath);
		//		} catch (IOException e) {
		//			e.printStackTrace();
		//		}
		//		
		//		WritableRaster raster = bufferedImage .getRaster();
		//		DataBufferByte data   = (DataBufferByte) raster.getDataBuffer();
		//		 
				
		BufferedReader reader = null;
		try {
			reader = new BufferedReader(new FileReader(file));
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}

		ArrayList<Byte> list = new ArrayList<>();

		int size = 0;
		try {
			while (reader.ready()){
				list.add((byte)reader.read());
				size++;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		byte[] originalBytes = new byte[size];
		
		for (int i = 0; i < size; i++){
			originalBytes[i] = list.get(i);
		}

		//		
		//		HuffmanTree tree = new HuffmanTree(originalBytes);

		//String string = "Four score and seven years ago, our forefathers stood upon this native soil and did some cool stuff.";

		HuffmanTree tree = new HuffmanTree(originalBytes);

		HuffmanCompressor compressor = new HuffmanCompressor();

		//byte[] stringAsBytes = string.getBytes();

		byte[] bytes = compressor.compress(tree, originalBytes);

		byte[] bytes2 = compressor.decompress(tree, size, bytes);

		System.out.println("Original Length: " + size + " Compressed Length:" + bytes.length);

		for ( int i = 0; i < originalBytes.length; i++ ) {
			if ( originalBytes[i] != bytes2[i] ) {
				System.out.println("FAIL!");
			}
		}

		System.out.println(new String(bytes2));

	}
}
